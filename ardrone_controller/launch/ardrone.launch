<launch>
	<!--rosparam file="$(find ardrone_lib)/parameters/global_controller_params.yaml" command="load" /-->
	<node name="ardrone_driver" pkg="ardrone_autonomy" type="ardrone_driver" output="screen" clear_params="true">
	    <param name="outdoor" value="0" />
	    <param name="max_bitrate" value="4000" />
	    <param name="bitrate" value="4000" />
	    <param name="navdata_demo" value="0" />
	    <param name="flight_without_shell" value="0" />
	    <param name="altitude_max" value="3000" />
        <param name="altitude_min" value="50" />
        <param name="euler_angle_max" value="0.21" />
        <param name="control_vz_max" value="700" />
	    <param name="control_yaw" value="1.75" />
	    <param name="do_imu_caliberation" value="true" />
	    <param name="tf_prefix" value="ardrone" />
        <!-- Covariance Values (3x3 matrices reshaped to 1x9)-->
        <rosparam param="cov/imu_la">[0.1, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1]</rosparam>
        <rosparam param="cov/imu_av">[1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</rosparam>
        <rosparam param="cov/imu_or">[1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 100000.0]</rosparam>
	</node>

	<node name="estimator" pkg="ardrone_sensor_fusion" type="sensor_fusion.py" respawn="false" output="screen" />
	<node name="controller" pkg="ardrone_controller" type="controller.py" respawn="false" output="screen" />
    <node name="trajectory" pkg="ardrone_trajectory_generator" type="trajectory.py" respawn="false" output="screen" />
    <node name="joystick" pkg="joy" type="joy_node" respawn="false" output="screen" />
    <node name="plotter" pkg="rqt_plot" type="rqt_plot" args="/ardrone/estimation/position/x:y:z:yaw /cmd_vel/linear/x:y:z /cmd_vel/angular/z" respawn="false" output="screen" />

</launch>
